#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;
void parallel_execution(vector<int>& arr, int& minVal, int& maxVal, int& sum, double& average){
    int n = arr.size();
    int local_min = arr[0];
    int local_max = arr[0];
    int local_sum = 0;
    #pragma omp parallel for reduction(min:local_min) reduction(max:local_max) reduction(+:local_sum)
    for(int i = 0; i < n ; i++){
        local_min = min(arr[i],local_min);
        local_max = max(arr[i],local_max);
        local_sum += arr[i];
    }
    minVal = local_min;
    maxVal = local_max;
    average = static_cast<double> (local_sum)/n;
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    vector<int> numbers(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> numbers[i];
    }
    int minVal, maxVal, sum;
    double average;
    parallel_execution(numbers, minVal, maxVal, sum, average);
    cout<<minVal << " "<< maxVal << " " << average;
}